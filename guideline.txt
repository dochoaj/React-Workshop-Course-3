1. Install redux, react-redux and redux-thunk

2. On index.js: Import pro

import { Provider } from 'react-redux'
import { createStore } from 'redux'

3. On reducers.js: Add the markup for reducers

import { combineReducers } from 'redux'

const reducers = combineReducers({})

export default reducers

4. On index.js: Creating store

import reducers from './reducers'

const store = createStore(reducers)

5. Add middleware to createStore

import thunk from 'redux-thunk'

modify import { createStore } from 'redux' to import { createStore, applyMiddleware } from 'redux'

modify const store = createStore(reducers) to const store = createStore(reducers, applyMiddleware(thunk))

6. Add Provider to Main component

render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
)

7. Show PokeAPI and talk about component separation. Build modules directory and list directory

8. Create modules/list/index.js

9. Create utils/index.js and utils/PokemonAxios.js with the following:

- PokemonAxios.js

import Axios from 'axios'

export default Axios.create({
  baseURL: 'http://pokeapi.co/api/v2',
  timeout: 25000,
})

- index.js

export PokemonAxios from './PokemonAxios'

9. Add the following code to modules/list/actions.js

import { PokemonAxios } from '../../utils'

export const FETCH_POKEMON_LIST = 'FETCH_POKEMON_LIST'
export const LOADING_POKEMON_LIST = 'LOADING_POKEMON_LIST'

export function fetchPokemonList() {
  return dispatch => {
    dispatch({ type: LOADING_POKEMON_LIST, payload: true })

    PokemonAxios.get('/pokemon')
      .then(response => {
        dispatch({ type: FETCH_POKEMON_LIST, payload: response.data })
      })
  }
}

10. Add the following to modules/list/index.js

export {
  FETCH_POKEMON_LIST,
  LOADING_POKEMON_LIST,
  fetchPokemonList,
} from './actions'

11. Create modules/list/reducer.js

12. Add the following to modules/list/reducer.js

import {
  FETCH_POKEMON_LIST,
} from './actions'

const initialState = {
  data: {},
  loading: true,
}

export default function (state = initialState, action) {
  switch (action.type) {
    case FETCH_POKEMON_LIST:
      return { ...state, data: action.payload, loading: false }
    default:
      return state
  }
}

13. Export reducer from list/index.js

export default from './reducer'

13. Import the reducer into reducers.js

const reducers = combineReducers({
  list: PokemonListReducer
})

14. Build the container, create the modules/list/Container.js file with the following

import { connect } from 'react-redux'
import { bindActionCreators } from 'redux'
import { fetchPokemonList } from '../list'

import View from './View'

function mapStateToProps(state) {
  return {
    results: state.list.data.results,
    loading: state.list.loading,
  }
}

function mapDispatchToProps(dispatch) {
  return {
    fetchPokemonList: bindActionCreators(fetchPokemonList, dispatch),
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(View)

15. Export container from list/index.js

export Container from './Container'

15. Build  the View, create the modules/list/View.js with the following

import React, { Component } from 'react'

class View extends Component {
  componentDidMount() {
    this.props.fetchPokemonList()
  }

  render() {
    console.log(this.props.results)
    console.log(this.props.loading)

    return (
      <h1>We all live in a pokemon world!</h1>
    )
  }
}

View.propTypes = {
  results: React.PropTypes.obj,
  loading: React.PropTypes.bool,
  fetchPokemonList: React.PropTypes.func,
}

export default View

16. Add the Table component with the following code:

import React, { Component } from 'react'

class Table extends Component {
  render() {
    return (
      <table className="table table-condensed">
        <thead>
          <tr>
            <th>#</th>
            <th>Name</th>
          </tr>
        </thead>
        <tbody>
        </tbody>
      </table>
    )
  }
}

Table.propTypes = {
  data: React.PropTypes.arrayOf(React.PropTypes.object)
}

export default Table

17. Create the Row component with the following code:

import React, { Component } from 'react'

class Row extends Component {
  render() {
    return (
      <tr>
        <th scope="row">{this.props.pokemon.pokedexNumber}</th>
        <td>{this.props.pokemon.name}</td>
      </tr>
    )
  }
}

Row.propTypes = {
  pokemon: React.PropTypes.shape({
    pokedexNumber: React.PropTypes.string,
    name: React.PropTypes.string,
  }),
}

export default Row

18. Add the row component to the Table component here

import React, { Component } from 'react'
import Row from '../Row'

class Table extends Component {
  constructor(props) {
    super(props)

    this.buildRows = this.buildRows.bind(this)
  }

  buildRows() {
    return this.props.data.map((item) => {
      const pokemon = {
        name: item.name,
        pokedexNumber: item.url.match(/\/\d+\//)[0].replace(/\//g, ''),
      }

      return <Row key={pokemon.name} pokemon={pokemon} />
    })
  }

  render() {
    return (
      <table className="table table-condensed">
        <thead>
          <tr>
            <th>#</th>
            <th>Name</th>
          </tr>
        </thead>
        <tbody>
          {this.buildRows()}
        </tbody>
      </table>
    )
  }
}

Table.propTypes = {
  data: React.PropTypes.arrayOf(React.PropTypes.object),
}

export default Table

19. Show the  Cannot read property 'map' of undefined error

20. Use the loading prop to sort the error

After componentDidMount:

  buildContent() {
    if (this.props.loading) {
      return (
        <h2>Loading...</h2>
      )
    }

    return (
      <Table data={this.props.results} />
    )
  }

  render() {
    console.log(this.props.results)
    console.log(this.props.loading)

    return (
      <div className="pokedex-container">
        <h1>We all live in a pokemon world!</h1>
        {this.buildContent()}
      </div>
    )
  }

21. Install react-router

22. Add pokemon card module. Create card directory with an index.js

23. Add actions.js with the following:

import { PokemonAxios } from '../../utils'

export const FETCH_POKEMON = 'FETCH_POKEMON'
export const LOADING_POKEMON = 'LOADING_POKEMON'

export function fetchPokemon(id) {
  return dispatch => {
    dispatch({ type: LOADING_POKEMON, payload: true })

    PokemonAxios.get(`/pokemon/${id}`)
      .then(response => {
        dispatch({ type: FETCH_POKEMON, payload: response.data })
      })
  }
}

25. Add actions and actions creators to index.

export {
  FETCH_POKEMON,
  LOADING_POKEMON,
  fetchPokemon,
} from './actions'

26. Create reducer.js

import {
  FETCH_POKEMON,
} from './actions'

const initialState = {
  data: {},
  loading: true,
}

export default function (state = initialState, action) {
  switch (action.type) {
    case FETCH_POKEMON:
      return { ...state, data: action.payload, loading: false }
    default:
      return state
  }
}

27. Add reducer to reducers.js

28. Create Container component with the following

import { connect } from 'react-redux'
import { bindActionCreators } from 'redux'
import { fetchPokemon } from '../card'

import View from './View'

function mapStateToProps(state) {
  return {
    pokemon: state.card.data,
    loading: state.card.loading,
  }
}

function mapDispatchToProps(dispatch) {
  return {
    fetchPokemon: bindActionCreators(fetchPokemon, dispatch),
  }
}

export default connect(mapStateToProps, mapDispatchToProps)(View)

29. Export container from index

30. Create card/view with the following

import React, { Component } from 'react'

class View extends Component {
  render() {
    return (
      <h2>This is a pokemon card</h2>
    )
  }
}

export default View

31. Install react-router into app:

- Add import { Router, hashHistory } from 'react-router' into index.js
- Add import routes from './routes' into index.js
- Add <Router history={hashHistory} routes={routes} /> into index.js inside Provider

32. Remove import App from './App' from index.js

32. Create routes.js with the following

import React from 'react'
import { Route, IndexRoute } from 'react-router'

import App from './App'
import { Container as PokemonList } from './modules/list'
import { Container as PokemonCard } from './modules/card'

export default(
  <Route path="/" component={App}>
    <IndexRoute component={PokemonList} />
    <Route path="pokemons" component={PokemonList} />
    <Route path="pokemon/:number" component={PokemonCard} />
  </Route>
)

33. Change App/App.js with the following:

import React, { Component } from 'react'
import './App.scss'

class App extends Component {
  render() {
    return (
      <div className="pokemon-list-container">
        <h1>We all live in a pokemon world!</h1>
        {this.props.children}
      </div>
    )
  }
}

App.propTypes = {
  children: React.PropTypes.element,
}

export default App

34.Change render method from list/view and change to:

render() {
  console.log(this.props.results)
  console.log(this.props.loading)
  return this.buildContent()
}

35. Create View with the following content

import React, { Component } from 'react'
import PokemonCard from './PokemonCard'

class View extends Component {
  componentDidMount() {
    this.props.fetchPokemon(this.props.params.number)
  }

  buildContent() {
    if (this.props.loading) {
      return <h1>Loading ...</h1>
    }

    return (
      <PokemonCard {...this.props.pokemon}/>
    )
  }

  render() {
    return this.buildContent()
  }
}

View.propTypes = {
  params: React.PropTypes.shape({
    number: React.PropTypes.string,
  }),
  pokemon: React.PropTypes.shape({
    sprites: React.PropTypes.shape({
      front_default: React.PropTypes.string,
    }),
    name: React.PropTypes.string,
    weight: React.PropTypes.number,
    height: React.PropTypes.number,
    types: React.PropTypes.arrayOf(React.PropTypes.object),
  }),
  loading: React.PropTypes.bool,
  fetchPokemon: React.PropTypes.func,
}

export default View

36. Create PokemonCard component with the following code:

import React, { Component } from 'react'
import { Link } from 'react-router'

import './PokemonCard.scss'

class PokemonCard extends Component {
  buildTypes() {
    return this.props.types.map((typeItem) => {
      const key = typeItem.slot
      const name = typeItem.type.name

      return (
        <div
          className="pokemon-type"
          key={key}
          >
          {name}
        </div>
      )
    })
  }

  render() {
    return (
      <div className="pokemon-card">
        <div className="pokemon-title">
          <div className="pokemon-image">
            <img
              className="img img-circle"
              src={this.props.sprites.front_default}
              alt={this.props.name}
            />
          </div>
          <div className="pokemon-name">
            {`# ${this.props.id} ${this.props.name}`}
          </div>
        </div>
        <div className="pokemon-data">
          <div className="pokemon-types">
            {this.buildTypes()}
          </div>
          <div className="pokemon-data-row">
            <span className="title">Height:</span>
            <span className="value">{this.props.height / 10} mts.</span>
          </div>
          <div className="pokemon-data-row">
            <span className="title">Width:</span>
            <span className="value">{this.props.weight / 10} kgs.</span>
          </div>
        </div>
        <Link to="/">
          Back to list
        </Link>
      </div>
    )
  }
}

PokemonCard.propTypes = {
  id: React.PropTypes.number,
  sprites: React.PropTypes.shape({
    front_default: React.PropTypes.string,
  }),
  name: React.PropTypes.string,
  weight: React.PropTypes.number,
  height: React.PropTypes.number,
  types: React.PropTypes.arrayOf(React.PropTypes.object),
}

export default PokemonCard

37. Add pokemon card styles

.pokemon-card {
  display: flex;
  width: 100%;
  justify-content: center;
  align-items: center;
  flex-direction: column;

  .pokemon-title {
    width: 100%;
    display: flex;
    flex-direction: row;

    .pokemon-name {
      display: flex;
      font-weight: bold;
      text-transform: uppercase;
      justify-content: center;
      align-items: center;
    }
  }

  .pokemon-data {
    display: flex;
    flex-direction: column;
    width: 100%;

    .pokemon-types {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;

      .pokemon-type {
        display: flex;
        justify-content: center;
        font-weight: bold;
        text-transform: capitalize;
      }
    }

    .pokemon-data-row {
      display: flex;

      .title {
        font-weight: bold;
      }

      .value {
        margin-left: 5px;
      }
    }
  }
}

38. Add styles to App.scss

.pokemon-list-container {
  display: flex;
  flex-direction: column;
  align-items: center;
}

39. Add linking to pages

In Row.js

import { Link } from 'react-router'

<td>
  <Link to={`pokemon/${this.props.pokemon.pokedexNumber}`}>
    {this.props.pokemon.name}
  </Link>
</td>

In PokemonCard.js

import { Link } from 'react-router'

<Link to="/">
  Back to list
</Link>

40. Talk about the problem when changing pages. Implement the loading reducer.

In card/actions.js add:

export function triggerLoading() {
  return dispatch => {
    dispatch({ type: LOADING_POKEMON, payload: true })
  }
}

41. Export triggerLoading on card/index.js

42. Add loading pokemon action to reducer

43. Add triggerLoading on container

44. Call on componentWillMount
